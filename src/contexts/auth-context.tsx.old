'use client'

import { createContext, useContext, useState, useEffect, ReactNode } from 'react'
import { useRouter } from 'next/navigation'
import { auth as mockAuth, User } from '@/lib/mock-auth'

interface AuthResult {
  success: boolean
  error?: string
  user?: User
}

interface AuthContextType {
  user: User | null
  loading: boolean
  isAuthenticated: boolean
  isAdmin: boolean
  isPartner: boolean
  login: (email: string, password: string) => Promise<AuthResult>
  register: (email: string, password: string, name: string, businessId?: string) => Promise<AuthResult>
  logout: () => void
}

const AuthContext = createContext<AuthContextType | undefined>(undefined)

export function AuthProvider({ children }: { children: ReactNode }) {
  const [user, setUser] = useState<User | null>(null)
  const [loading, setLoading] = useState(true)
  const router = useRouter()

  useEffect(() => {
    const currentUser = mockAuth.getCurrentUser()
    console.log('Auth Context - Current User:', currentUser) // ADD THIS LINE
    setUser(currentUser)
    setLoading(false)
    
  }, [])

  const login = async (email: string, password: string): Promise<AuthResult> => {
    const result = await mockAuth.login(email, password)
    if (result.success && result.user) {
      setUser(result.user)
    }
    return result
  }

  const register = async (email: string, password: string, name: string, businessId?: string): Promise<AuthResult> => {
    const result = await mockAuth.register(email, password, name, businessId)
    if (result.success && result.user) {
      setUser(result.user)
    }
    return result
  }

  const logout = () => {
    mockAuth.logout()
    setUser(null)
    router.push('/')
  }

  const value = {
    user,
    loading,
    isAuthenticated: !!user,
    isAdmin: mockAuth.isAdmin(),
    isPartner: mockAuth.isPartner(),
    login,
    register,
    logout
  }

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  )
}

export function useAuth() {
  const context = useContext(AuthContext)
  if (context === undefined) {
    throw new Error('useAuth deve ser usado dentro de um AuthProvider')
  }
  return context
}