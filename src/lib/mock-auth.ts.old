// src/lib/mock-auth.ts
import { mockBusinesses } from './mock-data'

export interface User {
  id: string
  email: string
  name: string
  businessId?: string
  role: 'admin' | 'partner' | 'user'
  avatar?: string
}

// Interface interna para o mock com senha
interface MockUserWithPassword extends User {
  password: string
}

// Mock de usu√°rios (senha padr√£o: 123456)
const MOCK_USERS: MockUserWithPassword[] = [
  {
    id: 'u1',
    email: 'admin@marajoara.com',
    password: '123456',
    name: 'Administrador',
    role: 'admin',
    avatar: 'üë®‚Äçüíº'
  },
  {
    id: 'u2',
    email: 'pizza@marajoara.com',
    password: '123456',
    name: 'Jo√£o Silva',
    businessId: '1', // Pizzaria Bella Italia
    role: 'partner',
    avatar: 'üçï'
  },
  {
    id: 'u3',
    email: 'beauty@marajoara.com',
    password: '123456',
    name: 'Maria Santos',
    businessId: '2', // Studio Beauty Nails
    role: 'partner',
    avatar: 'üíÖ'
  },
  {
    id: 'u4',
    email: 'user@teste.com',
    password: '123456',
    name: 'Cliente Teste',
    role: 'user',
    avatar: 'üë§'
  }
]

// Chave para localStorage
const AUTH_KEY = 'marajoara_auth'
const TOKEN_KEY = 'marajoara_token'

// Classe de autentica√ß√£o
class MockAuthService {
  // Verificar se est√° logado
  isAuthenticated(): boolean {
    if (typeof window === 'undefined') return false
    return !!localStorage.getItem(TOKEN_KEY)
  }

  // Pegar usu√°rio atual
  getCurrentUser(): User | null {
    if (typeof window === 'undefined') return null
    
    const token = localStorage.getItem(TOKEN_KEY)
    if (!token) return null
    
    const userData = localStorage.getItem(AUTH_KEY)
    if (!userData) return null
    
    try {
      return JSON.parse(userData) as User
    } catch {
      return null
    }
  }

  // Login
  async login(email: string, password: string): Promise<{ success: boolean; user?: User; error?: string }> {
    // Simular delay de API
    await new Promise(resolve => setTimeout(resolve, 500))
    
    const mockUser = MOCK_USERS.find(u => u.email === email && u.password === password)
    
    if (!mockUser) {
      return { 
        success: false, 
        error: 'Email ou senha inv√°lidos' 
      }
    }
    
    // Criar objeto de usu√°rio sem a senha
    const user: User = {
      id: mockUser.id,
      email: mockUser.email,
      name: mockUser.name,
      businessId: mockUser.businessId,
      role: mockUser.role,
      avatar: mockUser.avatar
    }
    
    // Salvar no localStorage
    const token = `mock_token_${Date.now()}_${user.id}`
    localStorage.setItem(TOKEN_KEY, token)
    localStorage.setItem(AUTH_KEY, JSON.stringify(user))
    
    return { 
      success: true, 
      user 
    }
  }

  // Registro
  async register(email: string, password: string, name: string, businessId?: string): Promise<{ success: boolean; user?: User; error?: string }> {
    // Simular delay de API
    await new Promise(resolve => setTimeout(resolve, 500))
    
    // Verificar se email j√° existe
    if (MOCK_USERS.some(u => u.email === email)) {
      return { 
        success: false, 
        error: 'Email j√° cadastrado' 
      }
    }
    
    // Criar novo usu√°rio
    const newUser: User = {
      id: `u${Date.now()}`,
      email,
      name,
      businessId,
      role: businessId ? 'partner' : 'user',
      avatar: businessId ? 'üè™' : 'üë§'
    }
    
    // Criar usu√°rio com senha para o mock
    const newMockUser: MockUserWithPassword = {
      ...newUser,
      password
    }
    
    // Adicionar ao mock (em produ√ß√£o seria no banco)
    MOCK_USERS.push(newMockUser)
    
    // Auto login ap√≥s registro
    const token = `mock_token_${Date.now()}_${newUser.id}`
    localStorage.setItem(TOKEN_KEY, token)
    localStorage.setItem(AUTH_KEY, JSON.stringify(newUser))
    
    return { 
      success: true, 
      user: newUser 
    }
  }

  // Logout
  logout(): void {
    if (typeof window === 'undefined') return
    localStorage.removeItem(TOKEN_KEY)
    localStorage.removeItem(AUTH_KEY)
  }

  // Pegar dados da empresa do parceiro
  getPartnerBusiness() {
    const user = this.getCurrentUser()
    if (!user?.businessId) return null
    
    return mockBusinesses.find(b => b.id === user.businessId)
  }

  // Verificar se √© admin
  isAdmin(): boolean {
    const user = this.getCurrentUser()
    return user?.role === 'admin'
  }

  // Verificar se √© parceiro
  isPartner(): boolean {
    const user = this.getCurrentUser()
    return user?.role === 'partner'
  }
}

// Exportar inst√¢ncia √∫nica
export const auth = new MockAuthService()

// Exportar para testes
export const DEMO_CREDENTIALS = {
  admin: { email: 'admin@marajoara.com', password: '123456' },
  partner: { email: 'pizza@marajoara.com', password: '123456' },
  user: { email: 'user@teste.com', password: '123456' }
}